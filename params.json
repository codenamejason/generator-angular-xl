{"name":"generator-angular-xl","tagline":"An opinionated kickstarter for your next large scale AngularJS application.","body":"[![generator-angular-xl logo](https://raw2.github.com/kennethlynne/generator-angular-xl/master/logo.png)](https://github.com/kennethlynne/generator-angular-xl/)\r\n\r\nAn opinionated kickstarter for your next large scale AngularJS application.\r\nAvoid boilerplate and improve productivity and consistency.\r\n\r\n[[![Build Status](https://travis-ci.org/kennethlynne/generator-angular-xl.png?branch=master)](https://travis-ci.org/kennethlynne/generator-angular-xl)](https://travis-ci.org/kennethlynne/generator-angular-xl) [![Code Climate](https://codeclimate.com/github/kennethlynne/generator-angular-xl.png)](https://codeclimate.com/github/kennethlynne/generator-angular-xl)\r\n\r\n<img height=\"180\" align=\"left\" src=\"http://gruntjs.com/img/grunt-logo.svg\">\r\n\r\n<img height=\"180\" align=\"left\" src=\"http://bower.io/img/bower-logo.png\">\r\n\r\n<img height=\"180\" align=\"left\" src=\"https://s3.amazonaws.com/media-p.slid.es/uploads/hugojosefson/images/86267/angularjs-logo.png\">\r\n\r\n<br><br><br>\r\n========================\r\n<br>\r\n## Features\r\n- All scripts in `app/scrips`, `app/components` and `app/states` and styles in `app/styles` will be automatically included in minifiers, index.html and tests. Specify configuration once and share it between *all the things*. Need more control? Check out [resources.json](#resources.json).\r\n- Controllers, views and styling are grouped on a per component and state basis to facilitate high cohesion.\r\n- Test coverage using [Istanbul](http://gotwarlost.github.io/istanbul/) helps you find exactly what the lines of code that are tested or not. See an [example output](http://gotwarlost.github.io/istanbul/public/coverage/lcov-report/index.html)\r\n- Use [components](#component) as syntactic sugar to use directives as web components with a convention over configuration approach\r\n- Start a server with live reload, easily monitoring your progress with ```grunt server```\r\n- Run tests continually when implementing using KarmaJS using ```grunt test```\r\n- Build and minify the project with one command: ```grunt build```\r\n- Deploy to your [GitHub page](http://pages.github.com/) in one command: ```grunt deploy```\r\n- Intercept calls to an API and provide a [mock API](#crud-mock) to do fast prototyping\r\n- Use [models](#model) and [repositories](#repository) to avoid monolithic `dataService`s to interact with a back-end\r\n- Generate `manifest.appcache` to allow your application to be consumed offline (automatically revving filenames too)\r\n\r\n### Roadmap:\r\n- Support ES6 transpilation\r\n- Support coffescript\r\n- Support Jade\r\n- Add demo application\r\n- Support associations, validation and basic ORM functionality (ngSymbiosis.Model)\r\n- Support caching to localStorage or similar of models and `$http` requests (offline, spotty connection, change tracking etc.) (ngSymbiosis.Repository)\r\n- Support build targets (Cordova/Phonegap (iOS, Android), Chrome app, Web-app, Firefox OS app, Chrome plugin)\r\n- Move generator templates into the project, so that the templates may be configured on a per project basis\r\n- Support Gulp for build instead, or in combination with, grunt\r\n- Add protractor tests\r\n- Better documentation\r\n\r\nMaintainer: [Kenneth Lynne](https://github.com/kennethlynne)\r\n\r\nBased on [angular-seed](https://github.com/angular/angular-seed/) and [generator-angular](https://github.com/yeoman/generator-angular).\r\n\r\n-----\r\n\r\n## Quick start\r\n\r\nInstall Node.js with npm, then run:\r\n\r\n```\r\nnpm install -g generator-angular-xl\r\n```\r\n\r\nMake a new directory, and `cd` into it:\r\n```\r\nmkdir my-new-project\r\ncd my-new-project\r\n```\r\n\r\nRun `yo angular-xl`, with your application name:\r\n```\r\nyo angular-xl app-name\r\n```\r\n\r\nRun `grunt server` to start the local server.\r\n\r\n*Awesomeness ensues*\r\n\r\n# Developing with the generator\r\n\r\n## Available Grunt tasks\r\n\r\n```shell\r\ngrunt server    to run a test server with live reload.\r\ngrunt test      to run tests once (for continous integration)\r\nkarma start     to run tests coninously and rerun tests on file change\r\ngrunt changelog bumps version numbers in `bower.json` and `package.json` and creates a changelog based on your commit history using [these](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit) conventions\r\n\r\nThe following commands will build the application into the `/dist` folder.\r\ngrunt build     production profile, minified, concatinated and awesomified for production\r\ngrunt build:dev development profile, unminified code\r\ngrunt build:prototype same as dev profile, only stubbing out the API witch in turn makes this app a prototype :)\r\n\r\nDeploy\r\ngrunt deploy    takes whatever lies in the `/dist` folder and pushes it to the `gh-states` branch, making whatever build you run before available to the world to see at `<your-username>.github.io/<your-repository>/`\r\n\r\n```\r\n\r\n## Generators\r\n\r\nAvailable generators:\r\n\r\n* [angular-xl](#app) (aka [angular-xl:app](#app))\r\n* [angular-xl:crud-mock](#crud-mock)\r\n* [angular-xl:controller](#controller)\r\n* [angular-xl:directive](#directive)\r\n* [angular-xl:component](#component)\r\n* [angular-xl:filter](#filter)\r\n* [angular-xl:state](#state)\r\n* [angular-xl:service](#service)\r\n* [angular-xl:provider](#service)\r\n* [angular-xl:factory](#service)\r\n* [angular-xl:repository](#repository)\r\n* [angular-xl:model](#model)\r\n* [angular-xl:value](#service)\r\n* [angular-xl:constant](#service)\r\n* [angular-xl:decorator](#decorator)\r\n\r\n**Note: Generators are to be run from the root directory of your app.**\r\n\r\n### Module\r\n`app/scripts/module.js` contains the applications main module definition. All dependancies for your application needs to be specified here.\r\n\r\n### App\r\nSets up a new AngularJS app, generating all the boilerplate you need to get started. The app generator also installs Twitter Bootstrap and additional AngularJS modules.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl\r\n```\r\n\r\n### CRUD-Mock\r\nPrototype fast before the API is implemented, but implement like the API already exists.\r\n\r\n```bash\r\nyo angular-xl:crud-mock user\r\n```\r\n\r\nCreates the necessary code to stub out CRUD calls to `example.com/api/users` a CRUD API in the `dev` folder of your project. It will automatically intercept all calls done through ```$http``` to the API and reply with data after the given delay, when ever you are ready to implement with a real API set ```useMocks: false``` in `config/config.js`.\r\nThe mocks are excluded from the build by default.\r\n\r\n### State\r\nStates are located under `app/states`. A state basically is a controller, with a view and state specific styling. Routes are specified using the powerful Angular-UI Route API in the config section in the controller.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:state user\r\n```\r\n\r\nProduces `app/states/user/index/user.js`, `test/spec/states/user/index/user.js`, `app/states/user/index/views/user.html` and `app/states/user/styles/_user.scss`\r\n\r\n### Routing\r\nRoutes are configured in `app/config/routes.js`. Each individual controller registers its own route.\r\n\r\n### Controller\r\nGenerates a controller in `app/states` and an accompanying test in `test/spec/states`.\r\nEvery controller is generated with an accompanying initService, that is responsible for fetching data and returning a promise. This helps you load data *before* the controller is instantiated.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:controller user\r\n```\r\n\r\n### Directive\r\nGenerates a directive in `app/scripts/directives`.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:directive myDirective\r\n```\r\n\r\nProduces `app/scripts/directives/my-directive.js`:\r\n```javascript\r\nangular.module('myMod').directive('myDirective', function () {\r\n  return {\r\n    template: '<div></div>',\r\n    restrict: 'E',\r\n    link: function postLink(scope, element, attrs) {\r\n      element.text('this is the myDirective directive');\r\n    }\r\n  };\r\n});\r\n```\r\n### Component\r\nA component is basically a element directive that by convention use a view located in `app/views/component/<component-name>/<component-name>.html`.\r\nThis helps keep complexity low, and makes it easy to separate parts of your application into smaller and more maintainable parts. The view folder is configurable, and it is even possible to provide your own factory function for complete customizability.\r\nGenerates a directive in `app/scripts/components` that uses a factory called `componentFactory` for convention over configuration.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:component awesomeUnicorn\r\n```\r\nProduces these files:\r\n`app/scripts/components/awesome-unicorn.js`:\r\n```javascript\r\nangular.module('yourModule.components')\r\n    .controller('awesomeUnicornCtrl', function ($scope, $element) {\r\n        $element.text('this is the awesome unicorn component');\r\n    })\r\n    .component('awesomeUnicorn', function () {\r\n        return {\r\n            controller: 'awesomeUnicornComponentCtrl'\r\n        };\r\n    });\r\n```\r\n`test/spec/components/awesome-unicorn.js`\r\n`app/styles/components/awesome-unicorn/_awesome-unicorn.scss` (and adds an import statement to it in `app/styles/_components.scss`)\r\n`app/views/components/awesome-unicorn/awesome-unicorn.html`\r\n```\r\n<div class=\"awesome-unicorn-component\">\r\n    <p>This is the awesome-unicorn component.</p>\r\n</div>\r\n```\r\n\r\nWitch in turn lets you specify custom HTML tags like this to invoke a completely self contained component:\r\n```\r\n<awesome-unicorn-component></awesome-unicorn-component>\r\n```\r\n\r\nThe view has specified a component name as a class, helping you avoid CSS collisions. Specify your styles specific for this component in SCSS under a ```.awesome-unicorn-component``` class wrapper, and only this component is targeted. This is an OK approach until shadow DOMs and web components become widely supported.\r\n\r\n### Filter\r\nGenerates a filter in `app/scripts/filters`.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:filter myFilter\r\n```\r\n\r\nProduces `app/scripts/filters/my-filter.js`:\r\n```javascript\r\nangular.module('myMod').filter('myFilter', function () {\r\n  return function (input) {\r\n    return 'myFilter filter:' + input;\r\n  };\r\n});\r\n```\r\n\r\n### Service\r\nGenerates an AngularJS service.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:service myService\r\n```\r\n\r\nProduces `app/scripts/services/my-service.js`:\r\n```javascript\r\nangular.module('myMod').service('myService', function () {\r\n  // ...\r\n});\r\n```\r\n\r\nYou can also do `yo angular:factory`, `yo angular:provider`, `yo angular:value`, and `yo angular:constant` for other types of services.\r\n\r\n### Model\r\nUses [ngSymbiosis.model](https://github.com/ngSymbiosis/ngSymbiosis.model).\r\nGenerates an model with basic CRUD functionality with methods like `$save` and `$delete`. \r\n\r\nExample:\r\n```bash\r\nyo angular-xl:model category\r\n```\r\n*Please use singluar nouns for your models and repositories. The models url will be pluralized automatically by default.*\r\n\r\nProduces `app/models/category.js` and an accompanying test:\r\n\r\n```javascript\r\nangular.module('yourApp')\r\n    .factory('CategoryModel', function (BaseModel, APIBaseUrl, $http) {\r\n\r\n        var collectionUrl = 'categories';\r\n\r\n        function CategoryModel(data) {\r\n            data = data || {};\r\n            data.url = APIBaseUrl + collectionUrl;\r\n            BaseModel.call(this,data);\r\n        }\r\n\r\n        CategoryModel.$settings = {url: APIBaseUrl + collectionUrl};\r\n        CategoryModel.prototype = Object.create(BaseModel.prototype);\r\n        \r\n        //You can add custom methods or override existing ones here\r\n        //Example:\r\n        CategoryModel.prototype.$delete: function () {\r\n          var model = this;\r\n          \r\n          return $http.delete(model.$settings.urlBase + '/' + model.id, model).then(function (response) {\r\n            model.$set(response.data, true);\r\n            \r\n            //Show an anoying alert on every delete\r\n            alert('Hey there, you deleted something. Good for you.');\r\n            \r\n            return response;\r\n          });\r\n        }\r\n\r\n        return CategoryModel;\r\n    });\r\n```\r\n\r\nThen instantiate this in for example a controller\r\n\r\n```javascript\r\nangular.module('yourApp')\r\n    .controller('demo', function($scope, CategoryModel) {\r\n        \r\n            var category = new CategoryModel();\r\n\r\n            category.title = 'New title';\r\n            category.id = 5;\r\n\r\n            category\r\n                .$save() \r\n                //Since it has an id it will now do a PUT to /categories/5, \r\n                //if it did not have an id it would do a POST to /categories/\r\n                .then(function () {\r\n                    alert('Saved!');\r\n                })\r\n                .catch(function (err) {\r\n                    alert('Failed!');\r\n                });\r\n    });\r\n```\r\n\r\n### Repository\r\nUses [ngSymbiosis.repository](https://github.com/ngSymbiosis/ngSymbiosis.repository) \r\nGenerates a model and an accompanying repository to handle client side caching and change tracking. It uses $http by default, but you should override the methods for your own implementation. Return promises, and you're good.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:repository school\r\n```\r\n*Please use singluar nouns for your models and repositories. The models url will be pluralized automatically by default.*\r\n\r\nProduces `app/scripts/models/school.js`, `app/scripts/repositories/school.js` and an accompanying tests and mock data. \r\n```javascript\r\nangular.module('yourApp')\r\n    .factory('SchoolRepository', function ($injector, SchoolModel) {\r\n        var BaseRepository = $injector.get('BaseRepository');\r\n        return new BaseRepository({name: 'Category', model: SchoolModel});\r\n    });\r\n```\r\n\r\n#### Example:\r\n\r\n```javascript\r\nangular.module('myMod').service('myService', function (SchoolRepository) {\r\n  var school = SchoolRepository.create({id:5, title:'Awesomesauce'});\r\n  school.$save(); //Does a PUT to the applications configured API - /schools/1 with the elements data\r\n});\r\n```\r\n\r\n```javascript\r\n//Does a GET to the models base url (/videos/)\r\nVideoRepository.getAll().then(function (videos) {\r\n    $scope.videos = videos;\r\n});\r\n\r\n//Does a GET for a specific entity (/videos/1)\r\nVideoRepository.getById(1).then(function (video) {\r\n    $scope.video = video;\r\n});\r\n```\r\n\r\n#### Extending a repository with custom methods\r\n\r\nExample, showing how to add a custom `search` method to a `tags` repository: \r\n```javascript\r\n\r\nangular.module('yourApp')\r\n    .factory('TagRepository', function ($injector, TagModel, $http) {\r\n        var BaseRepository = $injector.get('BaseRepository');\r\n        \r\n        \r\n        function TagRepository() {\r\n            //Call `super`\r\n            BaseRepository.apply(this, arguments);\r\n        }\r\n        //Inherit from BaseRepository\r\n        TagRepository.prototype = Object.create(BaseRepository.prototype);\r\n\r\n        //Add custom serach method\r\n        TagRepository.prototype.search = function (query) {\r\n            var repository = this;\r\n            var Model = repository.$settings.model;\r\n\r\n            return $http.get(Model.$settings.url + '/search?q=' + query, {tracker: repository.$settings.name + '.search'}).then(function (response) {\r\n                if (angular.isArray(response.data)) {\r\n                    return response.data.map(function (item) {\r\n                        var instance = new Model(item);\r\n                        repository.cache[item.id] = instance;\r\n                        return instance;\r\n                    });\r\n                }\r\n                else {\r\n                    throw new Error('Unexpected response from API. Expected Array, got ' + typeof response.data, response.data);\r\n                }\r\n            });\r\n        };\r\n\r\n        //Return a new instance of the repository\r\n        return new TagRepository({name: 'TagRepository', model: TagModel});\r\n    });\r\n    \r\n```\r\n\r\n#### Usage\r\n\r\n```javascript\r\nTagRepository.search('query').then(function (hits) {\r\n    //hits is an array of model instances\r\n    doSomething(hits);\r\n});\r\n```\r\n\r\n### Decorator\r\nGenerates an AngularJS service decorator.\r\n\r\nExample:\r\n```bash\r\nyo angular-xl:decorator serviceName\r\n```\r\n\r\nProduces `app/scripts/decorators/servicename-decorator.js`:\r\n```javascript\r\nangular.module('myMod').config(function ($provide) {\r\n    $provide.decorator('serviceName', function ($delegate) {\r\n      // ...\r\n      return $delegate;\r\n    });\r\n  });\r\n```\r\n\r\n### CoffeeScript\r\nCoffeScript is not supported for now for maintenance reasons. Coffescript is awesome, but I won't spend the time necessary to maintain different versions for now. May be added in the future.\r\n\r\n### Minification Safe\r\nThe recommended build process uses `ngmin`, a tool that automatically adds these annotations. However, if you'd rather not use `ngmin`, you have to add these annotations manually yourself.\r\n\r\n## Bower Components\r\n\r\nThe following packages are always installed by the [app](#app) generator:\r\n\r\n* angular\r\n* [log](http://adamschwartz.co/log/)\r\n* angular-mocks\r\n* angular-animate\r\n* angular-scenario\r\n* angular-component-factory\r\n* angular-ui-router\r\n* angular-promise-tracker\r\n* angular-loading-bar\r\n* angular-xeditable\r\n* angular-ui-bootstrap\r\n* ng-symbiosis-utils\r\n* ng-symbiosis-routeprovider\r\n* ng-symbiosis-repository\r\n* ng-symbiosis-model\r\n\r\nThe following additional modules are optional:\r\n\r\n* angular-cookies\r\n* angular-loader\r\n* angular-touch\r\n* angular-resource\r\n* angular-sanitize\r\n* ngStorage\r\n\r\nAll of these can be updated with `bower update` as new versions of AngularJS are released.\r\nWhen you install new dependancies you have to add a reference to the script files in `resources.json` under ```external```. The build task will inject this into `index.html` during runtime, and when you build the project it will by convention use the minified version of the source file, that should be located in the same folder, with the exact same filename with a `.min` suffix. This will be concatenated without minification.\r\n\r\n## Configuration\r\nYeoman generated projects can be further tweaked according to your needs by modifying project files appropriately.\r\n\r\n### Output\r\nYou can change the `app` directory by adding a `appPath` property to `bower.json`. For instance, if you wanted to easily integrate with Express.js, you could add the following:\r\n\r\n```json\r\n{\r\n  \"name\": \"yo-test\",\r\n  \"version\": \"0.0.0\",\r\n  ...\r\n  \"appPath\": \"public\"\r\n}\r\n\r\n```\r\nThis will cause Yeoman-generated client-side files to be placed in `public`.\r\n\r\n## Resources.json\r\nAll configuration about what files and in what order the files are supposed to be loaded is specified in ```resources.json```.\r\nThis configuration is shared between both jasmine, minifiers and index.html.\r\n\r\nResource.json contains two sections. One for JS and one for SCSS.\r\n```\r\n\"config/routes.js\",\r\n\"scripts/**/*.js\"\r\n```\r\nFiles will be matched only once, so in the aforementioned example the routes config will be loaded before everything else is included.\r\n\r\nAdd a reference in resource to the **unminified** version of the library you want to use, as it will automatically use the library suffixed with `.min` during build time.\r\n\r\n## manifest.appcache\r\nWhen you build your application, the will automatically be created a cache manifest file in the dist folder.\r\nThe manifest file must be served with the MIME type text/cache-manifest.\r\nRead more about the HTML5 Appcache specification [here](http://appcachefacts.info/)\r\n\r\n## Testing\r\n\r\nRunning `grunt test` will run the unit tests with karma.\r\nUnder the folder ```test/coverage``` you will find your whole application structure mapped into matching HTML documents describing how tests cover your code. Use this to your advantage. Crush bugs before they are born.\r\n\r\n## Contribute\r\n\r\nSee the [contributing docs](https://github.com/yeoman/yeoman/blob/master/contributing.md)\r\n\r\nWhen submitting an issue, please follow the [guidelines](https://github.com/yeoman/yeoman/blob/master/contributing.md#issue-submission). Especially important is to make sure Yeoman is up-to-date, and providing the command or commands that cause the issue.\r\n\r\nWhen submitting a PR, make sure that the commit messages match the [AngularJS conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/).\r\n\r\nWhen submitting a bugfix, write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.\r\n\r\nWhen submitting a new feature, add tests that cover the feature.\r\n\r\n## License\r\n\r\n[BSD license](http://opensource.org/licenses/bsd-license.php)\r\n\r\n[![Analytics](https://ga-beacon.appspot.com/UA-46835353-1/generator-angular-xl/README)](https://github.com/igrigorik/ga-beacon)\r\n","google":"UA-46835353-1","note":"Don't delete this file! It's used internally to help with page regeneration."}